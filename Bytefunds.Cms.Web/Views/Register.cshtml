@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "_Layout.cshtml";
    MemberRegisterViewModel registerModel = new MemberRegisterViewModel();
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

<section class="clearfix loadPage loadBg">
    <div class="container register" style="margin-bottom:30px">
        <div class="row">
            <div class="form-block center-block p-20 light-gray-bg border-clear text-left">
                <h2 class="title">注册</h2>
                <form class="form-horizontal" role="form" action="/umbraco/Api/Member/Regsiter" method="post">
                    @*<div class="form-group has-feedback">
                            @Html.LabelFor(m => registerModel.Name, new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-8">
                                <div>
                                    @Html.TextBoxFor(m => registerModel.Name, new { @class = "form-control", placeholder = "请输入您的姓名" })
                                    <i class="fa fa-user form-control-feedback"></i>
                                </div>
                                @Html.ValidationMessageFor(m => registerModel.Name)
                            </div>
                        </div>*@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(m => registerModel.Phone, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-8">
                            <div>
                                @Html.TextBoxFor(m => registerModel.Phone, new { @class = "form-control", placeholder = "请输入您的手机号" })
                                <i class="fa fa-phone form-control-feedback"></i>
                            </div>
                            @Html.ValidationMessageFor(m => registerModel.Phone)
                        </div>

                    </div>
                    @*<div class="form-group has-feedback">
                            @Html.LabelFor(m => registerModel.Email, new { @class = "col-sm-3 control-label" })
                            <div class="col-sm-8">
                                <div>
                                    @Html.TextBoxFor(m => registerModel.Email, new { @class = "form-control", placeholder = "请输入您的邮箱" })
                                    <i class="fa fa-envelope form-control-feedback"></i>
                                </div>
                                @Html.ValidationMessageFor(m => registerModel.Email)
                            </div>
                        </div>*@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(m => registerModel.Password, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-8">
                            <div>
                                @Html.PasswordFor(m => registerModel.Password, new { @class = "form-control", placeholder = "请输入您的密码" })
                                <i class="fa fa-lock form-control-feedback"></i>
                            </div>
                            @Html.ValidationMessageFor(m => registerModel.Password)
                        </div>
                    </div>
                    <div class="form-group has-feedback">
                        <label class="col-sm-3 control-label" for="registerModel_Code">图形码</label>
                        <div class="col-sm-8">
                            <div class="row">
                                <div class="col-xs-6">
                                    <div>
                                        <input class="form-control" id="code" name="registerModel.Code" placeholder="图形验证码" type="text" value="">
                                    </div>
                                    <span class="field-validation-valid" data-valmsg-for="registerModel.Code" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-xs-6">
                                    <div id="vCode" style="width:115px; height: 40px; border: 1px solid #ccc; display: inline-block;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group has-feedback">
                        @Html.LabelFor(m => registerModel.Code, new { @class = "col-sm-3 control-label" })
                        <div class="col-sm-8">
                            <div class="row">
                                <div class="col-xs-6">
                                    <div>
                                        @Html.TextBoxFor(m => registerModel.Code, new { @class = "form-control", placeholder = "短信验证码" })
                                    </div>
                                    @Html.ValidationMessageFor(m => registerModel.Code)
                                </div>
                                <div class="col-xs-6">
                                    <button class="btn btn-group btn-warning margin-clear" data-href="/umbraco/Api/Member/GetCode" id="btncode">获取验证码</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="form-group has-feedback">
                            <label for="rePassword" class="col-sm-3 control-label">重复密码<span class="text-danger small">*</span></label>
                            <div class="col-sm-8">
                                <input type="password" class="form-control" id="rePassword" placeholder="Repeat Password" required onfocus="$(this).attr('placeholder','')" onblur="$(this).attr('placeholder','Repeat Password')">
                                <i class="fa fa-lock form-control-feedback"></i>
                            </div>
                        </div>*@
                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-8 submit-btn">
                            <button type="submit" class="btn btn-group btn-warning btn-animated">注册<i class="fa fa-check"></i></button>
                            <span>已经有账号， <a href="/login" class="underline">立即登录</a></span>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
@section scripts{
    <script>
        $(function () {
            var container = document.getElementById("vCode");
            var code = new vCode(container, {
                len: 4,
                bgColor: "#555555",
                colors: [
                    "#DDDDDD",
                    "#DDFF77",
                    "#77DDFF",
                    "#99BBFF",
                    "#EEEE00"
                ]
            });
            $("#btncode").click(function () {
                if ($("#registerModel_Phone").val() == "") {
                    finAlert("请先输入注册手机！", false);
                    return false;
                } else if ($("#code").val() == "") {
                    finAlert("请先输入图形验证码！", false);
                    return false;
                } else if ($("#code").val() != code.code) {
                    finAlert("图形码输入有误！", false);
                    return false;
                }
                $(this).attr("disabled", true);
                $.get($(this).data("href"), { phone: $("#registerModel_Phone").val() }, function (result) {
                    if (result) {
                        finAlert("验证码发送成功，请注意查收你的手机短信！", true);
                        var times = 60;
                        var interval = setInterval(function () {
                            $("#btncode").text(times + "s后再发送");
                            times--;
                            if (times <= 0) {
                                clearInterval(interval);
                                $("#btncode").text("获取验证码").attr("disabled", false);
                            }
                        }, 1000);
                    }
                    else {
                        finAlert("验证码发送失败，请重新发送", false);
                    }
                });
                return false;
            });
        });
    </script>
    <script>
        (function () {
            var randstr = function (length) {
                var key = {
                    str: [
                        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                        'o', 'p', 'q', 'r', 's', 't', 'x', 'u', 'v', 'y', 'z', 'w', 'n',
                        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
                    ],
                    randint: function (n, m) {
                        var c = m - n + 1;
                        var num = Math.random() * c + n;
                        return Math.floor(num);
                    },
                    randStr: function () {
                        var _this = this;
                        var leng = _this.str.length - 1;
                        var randkey = _this.randint(0, leng);
                        return _this.str[randkey];
                    },
                    create: function (len) {
                        var _this = this;
                        var l = len || 10;
                        var str = '';

                        for (var i = 0 ; i < l ; i++) {
                            str += _this.randStr();
                        }

                        return str;
                    }
                };
                length = length ? length : 10;

                return key.create(length);
            };

            var randint = function (n, m) {
                var c = m - n + 1;
                var num = Math.random() * c + n;
                return Math.floor(num);
            };

            var vCode = function (dom, options) {
                this.codeDoms = [];
                this.lineDoms = [];
                this.initOptions(options);
                this.dom = dom;
                this.init();
                this.addEvent();
                this.update();
                this.mask();
            };

            vCode.prototype.init = function () {
                this.dom.style.position = "relative";
                this.dom.style.overflow = "hidden";
                this.dom.style.cursor = "pointer";
                this.dom.title = "点击更换验证码";
                this.dom.style.background = this.options.bgColor;
                this.w = this.dom.clientWidth;
                this.h = this.dom.clientHeight;
                this.uW = this.w / this.options.len;
            };

            vCode.prototype.mask = function () {
                var dom = document.createElement("div");
                dom.style.cssText = [
                    "width: 100%",
                    "height: 100%",
                    "left: 0",
                    "top: 0",
                    "position: absolute",
                    "cursor: pointer",
                    "z-index: 9999999"
                ].join(";");

                dom.title = "点击更换验证码";

                this.dom.appendChild(dom);
            };

            vCode.prototype.addEvent = function () {
                var _this = this;
                _this.dom.addEventListener("click", function () {
                    _this.update.call(_this);
                });
            };

            vCode.prototype.initOptions = function (options) {

                var f = function () {
                    this.len = 4;
                    this.fontSizeMin = 22;
                    this.fontSizeMax = 38;
                    this.colors = [
                        "green",
                        "red",
                        "blue",
                        "#53da33",
                        "#AA0000",
                        "#FFBB00"
                    ];
                    this.bgColor = "#FFF";
                    this.fonts = [
                        "Times New Roman",
                        "Georgia",
                        "Serif",
                        "sans-serif",
                        "arial",
                        "tahoma",
                        "Hiragino Sans GB"
                    ];
                    this.lines = 10;
                    this.lineColors = [
                        "#888888",
                        "#FF7744",
                        "#888800",
                        "#008888"
                    ];

                    this.lineHeightMin = 1;
                    this.lineHeightMax = 3;
                    this.lineWidthMin = 10;
                    this.lineWidthMax = 60;
                };

                this.options = new f();

                if (typeof options === "object") {
                    for (i in options) {
                        this.options[i] = options[i];
                    }
                }
            };

            vCode.prototype.update = function () {
                for (var i = 0; i < this.codeDoms.length; i++) {
                    this.dom.removeChild(this.codeDoms[i]);
                }
                for (var i = 0; i < this.lineDoms.length; i++) {
                    this.dom.removeChild(this.lineDoms[i]);
                }
                this.createCode();
                this.draw();
            };

            vCode.prototype.createCode = function () {
                this.code = randstr(this.options.len);
            };

            vCode.prototype.verify = function (code) {
                return this.code === code;
            };

            vCode.prototype.draw = function () {
                this.codeDoms = [];
                for (var i = 0; i < this.code.length; i++) {
                    this.codeDoms.push(this.drawCode(this.code[i], i));
                }

                this.drawLines();
            };

            vCode.prototype.drawCode = function (code, index) {
                var dom = document.createElement("span");

                dom.style.cssText = [
                            "font-size:" + randint(this.options.fontSizeMin, this.options.fontSizeMax) + "px",
                            "color:" + this.options.colors[randint(0, this.options.colors.length - 1)],
                    "position: absolute",
                            "left:" + randint(this.uW * index, this.uW * index + this.uW - 20) + "px",
                            "top:" + randint(0, this.h - 40) + "px",
                            "transform:rotate(" + randint(-30, 30) + "deg)",
                            "-ms-transform:rotate(" + randint(-30, 30) + "deg)",
                            "-moz-transform:rotate(" + randint(-30, 30) + "deg)",
                            "-webkit-transform:rotate(" + randint(-30, 30) + "deg)",
                            "-o-transform:rotate(" + randint(-30, 30) + "deg)",
                            "font-family:" + this.options.fonts[randint(0, this.options.fonts.length - 1)],
                            "font-weight:" + randint(400, 900)
                ].join(";");
                dom.innerHTML = code;
                this.dom.appendChild(dom);

                return dom;
            };

            vCode.prototype.drawLines = function () {
                this.lineDoms = [];
                for (var i = 0; i < this.options.lines; i++) {
                    var dom = document.createElement("div");
                    dom.style.cssText = [
                        "position: absolute",
                                "opacity: " + randint(3, 8) / 10,
                                "width:" + randint(this.options.lineWidthMin, this.options.lineWidthMax) + "px",
                                "height:" + randint(this.options.lineHeightMin, this.options.lineHeightMax) + "px",
                                "background: " + this.options.lineColors[randint(0, this.options.lineColors.length - 1)],
                                "left:" + randint(0, this.w - 30) + "px",
                                "top:" + randint(0, this.h) + "px",
                                "transform:rotate(" + randint(-30, 30) + "deg)",
                                "-ms-transform:rotate(" + randint(-30, 30) + "deg)",
                                "-moz-transform:rotate(" + randint(-30, 30) + "deg)",
                                "-webkit-transform:rotate(" + randint(-30, 30) + "deg)",
                                "-o-transform:rotate(" + randint(-30, 30) + "deg)",
                                "font-family:" + this.options.fonts[randint(0, this.options.fonts.length - 1)],
                                "font-weight:" + randint(400, 900)
                    ].join(";");
                    this.dom.appendChild(dom);

                    this.lineDoms.push(dom);
                }
            };

            this.vCode = vCode;

        }).call(this);
    </script>
}
