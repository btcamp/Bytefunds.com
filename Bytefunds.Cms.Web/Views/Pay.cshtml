@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@using Bytefunds.Cms.Logic.Helpers;

@{
    Layout = "_Layout.cshtml";
    //"http://shypet.cn/Payment/Index?Username=测试&amp;Phone=15208377468&amp;Email=22335114101112@qq.com&amp;Linkphone=88163584&amp;Successurl=http://www.fino.trade/umbraco/Api/Payment/PaySuccess&amp;Failurl=http://www.fino.trade/umbraco/Api/Payment/PayFailure&amp;Paytype=2&amp;Formurl=https://pay.ecpss.com/sslpayment&amp;USD=1.00&amp;CNY=6.390"
    string payurl = SystemSettingsHelper.GetSystemSettingsByKey("pay:url");
    string paytype = SystemSettingsHelper.GetSystemSettingsByKey("pay:paytype");
    string successurl = SystemSettingsHelper.GetSystemSettingsByKey("pay:successurl");
    string payfailurl = SystemSettingsHelper.GetSystemSettingsByKey("pay:failurl");
    string[] array = paytype.Split(new string[] { "||" }, StringSplitOptions.RemoveEmptyEntries);


    string username = string.Empty, phone = string.Empty, email = string.Empty;
    string minAmount = Request.QueryString["minAmount"];
    int id = int.Parse(Request.QueryString["id"]);
    IContent product = ApplicationContext.Services.ContentService.GetById(id);

    IContentType ct = ApplicationContext.Services.ContentTypeService.GetContentType("PayRecords");
    IContent content = ApplicationContext.Services.ContentService.CreateContent("无用户名", ct.Id, "PayRecords");
    content.SetValue("isdeposit", false);

    content.SetValue("amountCny", "0");
    content.SetValue("rechargeDateTime", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
    content.SetValue("buyproduct", Request.QueryString["id"]);
    if (!Members.IsLoggedIn())
    {
        <script>
            window.onload = function () {
                window.location.href = "/login";
            }
        </script>

        //ApplicationContext.Services.ContentService.Save(content);
        //email = content.Id.ToString();
    }
    else
    {
        IMember member = ApplicationContext.Services.MemberService.GetByEmail(Members.GetCurrentLoginStatus().Email);
        username = Members.GetCurrentLoginStatus().Name;
        email = Members.GetCurrentLoginStatus().Email;
        phone = member.GetValue<string>("tel");

        content.SetValue("username", username);
        content.SetValue("email", email);
        content.SetValue("mobilePhone", phone);
        content.SetValue("memberPicker", member.Id.ToString());
        ApplicationContext.Services.ContentService.Save(content);
        email = email + "^_^" + content.Id;
    }

    string url = string.Format("{0}?Username={1}&Phone={2}&Email={3}&Linkphone=0&Successurl={4}&Failurl={5}&Paytype={6}&Formurl={7}&Amount={8}&cny=0&minAmount={9}", payurl, username, phone, email, successurl, payfailurl, array[0], array[1], product.GetValue<string>("amount"), minAmount);
}
<section class="section clearfix">
    <div class="container">
        <h2 class="text-center">购买产品</h2>
        <div class="separator"></div>
        <div class="row grid-space-10">
            <iframe src="@url" style="border:none;width:100%;min-height:630px"></iframe>
        </div>
    </div>
</section>
@section scripts{
    <script>
        function openWaitingModal() {
            if ('undefined' == typeof (document.body.style.maxHeight)) {
                return;
            }
            bootbox.dialog({
                message: "请在弹出的页面中支付，支付完成后请点击完成按钮",//
                title: "购买基金",//
                buttons: {
                    success: {
                        label: "支付完成",//
                        className: "btn-success",
                        callback: function () {
                            location = "/memberinfo";
                        }
                    },
                    danger: {
                        label: "支付失败",//
                        className: "btn-danger",
                        callback: function () {

                        }
                    }
                }
            });
        }
    </script>
}